# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - publish-docker-images
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

# Admin Service
build-admin-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build admin service..."
    - cd AdminService
    - ./gradlew clean build
    - echo "Build admin service successfully."
  artifacts:
    paths:
      - AdminService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-admin-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-admin-service
  script:
    - echo "Publish docker image admin service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd AdminService
    - docker build -t $DOCKER_USERNAME/admin-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/admin-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/admin-service:latest
    - docker image push $DOCKER_USERNAME/admin-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/admin-service:latest
    - echo "Publish docker image admin service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Auth Service
build-auth-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build auth service..."
    - cd AuthService
    - ./gradlew clean build
    - echo "Build auth service successfully."
  artifacts:
    paths:
      - AuthService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-auth-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-auth-service
  script:
    - echo "Publish docker image auth service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd AuthService
    - docker build -t $DOCKER_USERNAME/auth-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/auth-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/auth-service:latest
    - docker image push $DOCKER_USERNAME/auth-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/auth-service:latest
    - echo "Publish docker image auth service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Cart Service
build-cart-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build cart service..."
    - cd CartService
    - ./gradlew clean build
    - echo "Build cart service successfully."
  artifacts:
    paths:
      - CartService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-cart-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-cart-service
  script:
    - echo "Publish docker image cart service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd CartService
    - docker build -t $DOCKER_USERNAME/cart-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/cart-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/cart-service:latest
    - docker image push $DOCKER_USERNAME/cart-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/cart-service:latest
    - echo "Publish docker image cart service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Customer Service
build-customer-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build customer service..."
    - cd CustomerService
    - ./gradlew clean build
    - echo "Build customer service successfully."
  artifacts:
    paths:
      - CustomerService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-customer-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-customer-service
  script:
    - echo "Publish docker image customer service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd CustomerService
    - docker build -t $DOCKER_USERNAME/customer-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/customer-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/customer-service:latest
    - docker image push $DOCKER_USERNAME/customer-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/customer-service:latest
    - echo "Publish docker image customer service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Gateway Jwt Service
build-gateway-jwt-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build gateway-jwt service..."
    - cd gateway-jwt
    - ./gradlew clean build
    - echo "Build gateway-jwt service successfully."
  artifacts:
    paths:
      - gateway-jwt/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-gateway-jwt-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-gateway-jwt-service
  script:
    - echo "Publish docker image gateway-jwt service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd gateway-jwt
    - docker build -t $DOCKER_USERNAME/gateway-jwt-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/gateway-jwt-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/gateway-jwt-service:latest
    - docker image push $DOCKER_USERNAME/gateway-jwt-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/gateway-jwt-service:latest
    - echo "Publish docker image gateway-jwt service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Order Service
build-order-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build order service..."
    - cd OrderService
    - ./gradlew clean build
    - echo "Build order service successfully."
  artifacts:
    paths:
      - OrderService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-order-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-order-service
  script:
    - echo "Publish docker image order service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd OrderService
    - docker build -t $DOCKER_USERNAME/order-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/order-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/order-service:latest
    - docker image push $DOCKER_USERNAME/order-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/order-service:latest
    - echo "Publish docker image order service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Product Service
build-product-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build product service..."
    - cd ProductService
    - ./gradlew clean build
    - echo "Build product service successfully."
  artifacts:
    paths:
      - ProductService/build/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-product-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-product-service
  script:
    - echo "Publish docker image product service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd ProductService
    - docker build -t $DOCKER_USERNAME/product-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/product-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/product-service:latest
    - docker image push $DOCKER_USERNAME/product-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/product-service:latest
    - echo "Publish docker image product service...."
    - echo "Publish docker image product service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Registry Service
build-registry-service:
  stage: build
  image: eclipse-temurin:17.0.11_9-jdk
  script:
    - echo "Build registry service..."
    - cd registry
    - ./mvnw clean package
    - echo "Build registry service successfully."
  artifacts:
    paths:
      - registry/target/*
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-docker-image-registry-service:
  stage: publish-docker-images
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  dependencies:
    - build-registry-service
  script:
    - echo "Publish docker image registry service..."
    - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - cd registry
    - docker build -t $DOCKER_USERNAME/registry-service:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_USERNAME/registry-service:$CI_COMMIT_SHORT_SHA $DOCKER_USERNAME/registry-service:latest
    - docker image push $DOCKER_USERNAME/registry-service:$CI_COMMIT_SHORT_SHA
    - docker image push $DOCKER_USERNAME/registry-service:latest
    - echo "Publish docker image registry service successfully."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
